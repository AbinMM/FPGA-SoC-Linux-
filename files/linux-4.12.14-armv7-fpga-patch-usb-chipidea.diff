diff --git arch/arm/boot/dts/zynq-pynqz1.dts arch/arm/boot/dts/zynq-pynqz1.dts
index 1c94b7a..f659ff7 100644
--- arch/arm/boot/dts/zynq-pynqz1.dts
+++ arch/arm/boot/dts/zynq-pynqz1.dts
@@ -28,9 +28,11 @@
 	};
 
 	usb_phy0: phy0 {
-		#phy-cells = <0>;
-		compatible = "usb-nop-xceiv";
-		reset-gpios = <&gpio0 46 1>;
+		compatible = "ulpi-phy";
+		#phy-cells = <0x0>;
+		reg = <0xe0002000 0x1000>;
+		view-port = <0x170>;
+		drv-vbus;
 	};
 };
 
diff --git drivers/usb/chipidea/ci_hdrc_usb2.c drivers/usb/chipidea/ci_hdrc_usb2.c
index d162cc0..325fc35 100644
--- drivers/usb/chipidea/ci_hdrc_usb2.c
+++ drivers/usb/chipidea/ci_hdrc_usb2.c
@@ -33,6 +33,7 @@ static const struct ci_hdrc_platform_data ci_default_pdata = {
 
 static struct ci_hdrc_platform_data ci_zynq_pdata = {
 	.capoffset	= DEF_CAPOFFSET,
+	.flags          = CI_HDRC_PHY_VBUS_CONTROL,
 };
 
 static const struct of_device_id ci_hdrc_usb2_of_match[] = {
@@ -61,9 +62,17 @@ static int ci_hdrc_usb2_probe(struct platform_device *pdev)
 		*ci_pdata = *(struct ci_hdrc_platform_data *)match->data;
 	}
 
+	ci_pdata->usb_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 0);
+	if (IS_ERR(ci_pdata->usb_phy)) {
+                dev_err(dev, "devm_usb_get_phy_by_phandle() error");
+		return PTR_ERR(ci_pdata->usb_phy);
+        }
+
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
-	if (!priv)
+        if (!priv) {
+                dev_err(dev, "devm_kzalloc() error");
 		return -ENOMEM;
+        }
 
 	priv->clk = devm_clk_get(dev, NULL);
 	if (!IS_ERR(priv->clk)) {
@@ -74,6 +83,10 @@ static int ci_hdrc_usb2_probe(struct platform_device *pdev)
 		}
 	}
 
+        ret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));
+        if (ret)
+                goto clk_err;
+
 	ci_pdata->name = dev_name(dev);
 
 	priv->ci_pdev = ci_hdrc_add_device(dev, pdev->resource,
diff --git drivers/usb/chipidea/host.c drivers/usb/chipidea/host.c
index 18cb8e4..a5a1fe2 100644
--- drivers/usb/chipidea/host.c
+++ drivers/usb/chipidea/host.c
@@ -66,6 +66,14 @@ static int ehci_ci_portpower(struct usb_hcd *hcd, int portnum, bool enable)
 		}
 	}
 
+	if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+			ci->usb_phy && ci->usb_phy->set_vbus) {
+		if (enable)
+			ci->usb_phy->set_vbus(ci->usb_phy, 1);
+		else
+			ci->usb_phy->set_vbus(ci->usb_phy, 0);
+	}
+
 	if (enable && (ci->platdata->phy_mode == USBPHY_INTERFACE_MODE_HSIC)) {
 		/*
 		 * Marvell 28nm HSIC PHY requires forcing the port to HS mode.
@@ -74,6 +82,7 @@ static int ehci_ci_portpower(struct usb_hcd *hcd, int portnum, bool enable)
 		hw_port_test_set(ci, 5);
 		hw_port_test_set(ci, 0);
 	}
+
 	return 0;
 };
 
diff --git drivers/usb/chipidea/otg_fsm.c drivers/usb/chipidea/otg_fsm.c
index 93e24ce..d4b3e85 100644
--- drivers/usb/chipidea/otg_fsm.c
+++ drivers/usb/chipidea/otg_fsm.c
@@ -475,6 +475,11 @@ static void ci_otg_drv_vbus(struct otg_fsm *fsm, int on)
 				return;
 			}
 		}
+
+		if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+				ci->usb_phy && ci->usb_phy->set_vbus)
+			ci->usb_phy->set_vbus(ci->usb_phy, 1);
+
 		/* Disable data pulse irq */
 		hw_write_otgsc(ci, OTGSC_DPIE, 0);
 
@@ -484,6 +489,10 @@ static void ci_otg_drv_vbus(struct otg_fsm *fsm, int on)
 		if (ci->platdata->reg_vbus)
 			regulator_disable(ci->platdata->reg_vbus);
 
+		if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+				ci->usb_phy && ci->usb_phy->set_vbus)
+			ci->usb_phy->set_vbus(ci->usb_phy, 0);
+
 		fsm->a_bus_drop = 1;
 		fsm->a_bus_req = 0;
 	}
diff --git drivers/usb/common/ulpi.c drivers/usb/common/ulpi.c
index 930e8f3..794ced1 100644
--- drivers/usb/common/ulpi.c
+++ drivers/usb/common/ulpi.c
@@ -183,9 +183,9 @@ static int ulpi_of_register(struct ulpi *ulpi)
 	/* Find a ulpi bus underneath the parent or the grandparent */
 	parent = ulpi->dev.parent;
 	if (parent->of_node)
-		np = of_find_node_by_name(parent->of_node, "ulpi");
+		np = of_find_node_by_name(of_node_get(parent->of_node), "ulpi");
 	else if (parent->parent && parent->parent->of_node)
-		np = of_find_node_by_name(parent->parent->of_node, "ulpi");
+		np = of_find_node_by_name(of_node_get(parent->parent->of_node), "ulpi");
 	if (!np)
 		return 0;
 
diff --git drivers/usb/phy/phy-ulpi.c drivers/usb/phy/phy-ulpi.c
index f48a7a2..29787a1 100644
--- drivers/usb/phy/phy-ulpi.c
+++ drivers/usb/phy/phy-ulpi.c
@@ -26,9 +26,16 @@
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include <linux/export.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
 #include <linux/usb.h>
 #include <linux/usb/otg.h>
 #include <linux/usb/ulpi.h>
+#include <linux/usb/phy.h>
 
 
 struct ulpi_info {
@@ -209,7 +216,7 @@ static int ulpi_init(struct usb_phy *phy)
 	return ulpi_set_flags(phy);
 }
 
-static int ulpi_set_host(struct usb_otg *otg, struct usb_bus *host)
+static int ulpi_otg_set_host(struct usb_otg *otg, struct usb_bus *host)
 {
 	struct usb_phy *phy = otg->usb_phy;
 	unsigned int flags = usb_phy_io_read(phy, ULPI_IFC_CTRL);
@@ -235,9 +242,8 @@ static int ulpi_set_host(struct usb_otg *otg, struct usb_bus *host)
 	return usb_phy_io_write(phy, flags, ULPI_IFC_CTRL);
 }
 
-static int ulpi_set_vbus(struct usb_otg *otg, bool on)
+static int ulpi_phy_set_vbus(struct usb_phy *phy, int on)
 {
-	struct usb_phy *phy = otg->usb_phy;
 	unsigned int flags = usb_phy_io_read(phy, ULPI_OTG_CTRL);
 
 	flags &= ~(ULPI_OTG_CTRL_DRVVBUS | ULPI_OTG_CTRL_DRVVBUS_EXT);
@@ -253,6 +259,31 @@ static int ulpi_set_vbus(struct usb_otg *otg, bool on)
 	return usb_phy_io_write(phy, flags, ULPI_OTG_CTRL);
 }
 
+static int ulpi_otg_set_vbus(struct usb_otg *otg, bool on)
+{
+	struct usb_phy *phy = otg->usb_phy;
+        return ulpi_phy_set_vbus(phy, on);
+}
+
+static void ulpi_initialize(
+        struct usb_phy*        phy,
+        struct usb_otg*        otg,
+        struct usb_phy_io_ops* ops,
+        unsigned int           flags
+)
+{
+	phy->label	= "ULPI";
+	phy->flags	= flags;
+	phy->io_ops	= ops;
+	phy->otg	= otg;
+	phy->init	= ulpi_init;
+	phy->set_vbus	= ulpi_phy_set_vbus;
+
+	otg->usb_phy	= phy;
+	otg->set_host	= ulpi_otg_set_host;
+	otg->set_vbus	= ulpi_otg_set_vbus;
+}
+
 struct usb_phy *
 otg_ulpi_create(struct usb_phy_io_ops *ops,
 		unsigned int flags)
@@ -270,17 +301,96 @@ otg_ulpi_create(struct usb_phy_io_ops *ops,
 		return NULL;
 	}
 
-	phy->label	= "ULPI";
-	phy->flags	= flags;
-	phy->io_ops	= ops;
-	phy->otg	= otg;
-	phy->init	= ulpi_init;
-
-	otg->usb_phy	= phy;
-	otg->set_host	= ulpi_set_host;
-	otg->set_vbus	= ulpi_set_vbus;
-
+        ulpi_initialize(phy, otg, ops, flags);
 	return phy;
 }
 EXPORT_SYMBOL_GPL(otg_ulpi_create);
 
+struct ulpi_phy {
+	struct usb_phy  usb_phy;
+        struct usb_otg  usb_otg;
+	void  __iomem*  regs;
+	unsigned int    vp_offset;
+	unsigned int    flags;
+};
+
+static int ulpi_phy_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct resource *res;
+	struct ulpi_phy *uphy;
+	bool flag;
+	int ret;
+
+	uphy = devm_kzalloc(&pdev->dev, sizeof(*uphy), GFP_KERNEL);
+	if (!uphy) {
+		dev_err(&pdev->dev, "devm_kzalloc() error");
+		ret = -ENOMEM;
+                goto error;
+        }
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	uphy->regs = devm_ioremap(&pdev->dev, res->start, resource_size(res));
+	if (IS_ERR(uphy->regs)) {
+		dev_err(&pdev->dev, "devm_ioremap() error");
+		ret = PTR_ERR(uphy->regs);
+                goto error;
+        }
+
+	ret = of_property_read_u32(np, "view-port", &uphy->vp_offset);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "view-port register not specified\n");
+                goto error;
+	}
+
+	flag = of_property_read_bool(np, "drv-vbus");
+	if (flag)
+		uphy->flags |= ULPI_OTG_DRVVBUS | ULPI_OTG_DRVVBUS_EXT;
+
+        ulpi_initialize(&uphy->usb_phy, &uphy->usb_otg, &ulpi_viewport_access_ops, uphy->flags);
+
+	uphy->usb_phy.dev = &pdev->dev;
+
+	uphy->usb_phy.io_priv = uphy->regs + uphy->vp_offset;
+
+	ret = usb_add_phy_dev(&uphy->usb_phy);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "usb_add_phy_dev() error");
+                goto error;
+        }
+
+	platform_set_drvdata(pdev, uphy);
+
+	return 0;
+
+    error:
+        return ret;
+}
+
+static int ulpi_phy_remove(struct platform_device *pdev)
+{
+	struct ulpi_phy *uphy = platform_get_drvdata(pdev);
+
+        usb_remove_phy(&uphy->usb_phy);
+	return 0;
+}
+
+static const struct of_device_id ulpi_phy_table[] = {
+	{ .compatible = "ulpi-phy" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ulpi_phy_table);
+
+static struct platform_driver ulpi_phy_driver = {
+	.probe		= ulpi_phy_probe,
+	.remove		= ulpi_phy_remove,
+	.driver		= {
+		.name	= "ulpi-phy",
+		.of_match_table = ulpi_phy_table,
+	},
+};
+module_platform_driver(ulpi_phy_driver);
+
+MODULE_DESCRIPTION("ULPI PHY driver");
+MODULE_LICENSE("GPL v2");
+
diff --git include/linux/usb/chipidea.h include/linux/usb/chipidea.h
index c5fdfcf9..985ee0fb 100644
--- include/linux/usb/chipidea.h
+++ include/linux/usb/chipidea.h
@@ -58,6 +58,7 @@ struct ci_hdrc_platform_data {
 #define CI_HDRC_OVERRIDE_TX_BURST	BIT(10)
 #define CI_HDRC_OVERRIDE_RX_BURST	BIT(11)
 #define CI_HDRC_OVERRIDE_PHY_CONTROL	BIT(12) /* Glue layer manages phy */
+#define CI_HDRC_PHY_VBUS_CONTROL	BIT(13)
 	enum usb_dr_mode	dr_mode;
 #define CI_HDRC_CONTROLLER_RESET_EVENT		0
 #define CI_HDRC_CONTROLLER_STOPPED_EVENT	1
